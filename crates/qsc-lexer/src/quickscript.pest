// The main lexer entrypoint
main = { SOI ~ (function | extern)* ~ EOI }

// Blocks & Statements
function    = { "fn" ~ ident ~ "(" ~ params? ~ ")" ~ ("->" ~ type)? ~ block }
extern      = { "extern" ~ "fn" ~ ident ~ "(" ~ params? ~ ")" ~ ("->" ~ type)? ~ ";" }
block       = { "{" ~ statement* ~ "}" }
expr        = { binary_op | term }
term        = { call | literal | ident }
statement   = { real_stmt ~ ";"? | COMMENT | WHITESPACE }
real_stmt   = { conditional | ret | var | expr | block }
conditional = { "if" ~ expr ~ block ~ ("else" ~ block)? }

// Keywords
var = { "let" ~ "mut"? ~ ident ~ (":" ~ type)? ~ "=" ~ expr ~ ";" }
ret = { "return" ~ expr? ~ ";" }

// Types
call    =  { ident ~ "(" ~ args? ~ ")" }
literal =  { char | number | string | bool }
number  =  { int | float }
ident   = ${ ('a'..'z' | 'A'..'Z') ~ ident_char* }
bool    =  { "true" | "false" }

// Type helpers
params = { param ~ ("," ~ param)* }
param  = { "mut"? ~ ident ~ ":" ~ type }
type   = { ident ~ ("<" ~ type ~ ">")? }
args   = { expr ~ ("," ~ expr)* }

// Primitives & Helpers
int        = { digit+ }
float      = { digit+ ~ "." ~ digit+ }
string     = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
char       = { "'" ~ (!"'" ~ ANY)+ ~ "'" }
digit      = { '0'..'9' }
ident_char = { 'a'..'z' | 'A'..'Z' | digit | "_" }

// Operators
binary_op = { unary_op ~ operator ~ unary_op }
unary_op  = { (("+" | "-") ~ term) | term }

operator = {
    "+"
  | "-"
  | "*"
  | "/"
  | "%"
  | "=="
  | "!="
  | "<"
  | ">"
  | "<="
  | ">="
  | "&&"
  | "||"
  | "&"
  | "|"
  | "~"
  | "^"
  | "+="
  | "*="
  | "/="
  | "%="
  | "&="
  | "|="
  | "~="
  | "^="
}

// Language features
__comment_block = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
__comment_line  = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

WHITESPACE = _{ " " | "\n" }
COMMENT    = _{ __comment_block | __comment_line }
